<Type Name="IPlayer" FullName="Muine.PluginLib.IPlayer">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface IPlayer" />
  <AssemblyInfo>
    <AssemblyName>muine-plugin</AssemblyName>
    <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 11 00 00 00 C5 37 4D 60 8D CC BC 44 7A D1 32 5C B6 3C 9B D1 6B 06 FB A7 3E A7 1A 10 D3 C9 F3 11 88 C7 7D D3 04 CA B0 96 51 5C 27 24 3C 5C 31 1D A5 06 36 19 95 BB 06 BB 44 FD 61 84 E0 5A 64 B4 83 3B A8 51 D3 19 7A DC F9 3E 16 C3 70 08 C9 6A 52 D3 34 66 7B B8 E0 D1 9F 27 71 7A E9 79 69 47 BE 41 4F B7 F6 BF 6F BE 3B E7 71 12 73 FC 8A 1D FD 7C 4B 24 7F C3 5E A6 EE 15 E4 1F A2 FB 99 9B 72 04 64 82]</AssemblyPublicKey>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Player interface</summary>
    <remarks>This is the interface used to control and query Muine from within your plug-in.</remarks>
  </Docs>
  <Interfaces />
  <Members>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public void Next ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public void Previous ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaySong">
      <MemberSignature Language="C#" Value="public void PlaySong (uint time);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Opens the "Play Song" window</summary>
        <param name="time">the timestamp of the originating user interaction</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayAlbum">
      <MemberSignature Language="C#" Value="public void PlayAlbum (uint time);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>Opens the "Play Album" window</summary>
        <param name="time">the timestamp of the originating user interaction</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenPlaylist">
      <MemberSignature Language="C#" Value="public void OpenPlaylist (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayFile">
      <MemberSignature Language="C#" Value="public void PlayFile (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueFile">
      <MemberSignature Language="C#" Value="public void QueueFile (string uri);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="uri">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Quit">
      <MemberSignature Language="C#" Value="public void Quit ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWindowVisible">
      <MemberSignature Language="C#" Value="public void SetWindowVisible (bool visible, uint time);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
        <Parameter Name="time" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <summary>To be added</summary>
        <param name="visible">a <see cref="T:System.Boolean" /></param>
        <param name="time">the timestamp of the originating user interaction</param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFolder">
      <MemberSignature Language="C#" Value="public void AddFolder (string folder);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Recursively adds the contents of a folder to the database</summary>
        <param name="folder">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFolder">
      <MemberSignature Language="C#" Value="public void RemoveFolder (string folder);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Recursively removes the contents of a folder from the database</summary>
        <param name="folder">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSong">
      <MemberSignature Language="C#" Value="public Muine.PluginLib.ISong AddSong (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.ISong</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Adds a file to the database</summary>
        <param name="path">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
        <returns>To be added.</returns>
      </Docs>
    </Member>
    <Member MemberName="SyncSong">
      <MemberSignature Language="C#" Value="public void SyncSong (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Syncs the database with the metadata of a file</summary>
        <param name="path">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncSong">
      <MemberSignature Language="C#" Value="public void SyncSong (Muine.PluginLib.ISong song);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="song" Type="Muine.PluginLib.ISong" />
      </Parameters>
      <Docs>
        <summary>Syncs the database with the metadata of a file</summary>
        <param name="song">a <see cref="T:Muine.PluginLib.ISong" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSong">
      <MemberSignature Language="C#" Value="public void RemoveSong (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <summary>Removes a song from the database</summary>
        <param name="path">a <see cref="T:System.String" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSong">
      <MemberSignature Language="C#" Value="public void RemoveSong (Muine.PluginLib.ISong song);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="song" Type="Muine.PluginLib.ISong" />
      </Parameters>
      <Docs>
        <summary>Removes a song from the database</summary>
        <param name="song">a <see cref="Muine.PluginLib.ISong" /></param>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayingSong">
      <MemberSignature Language="C#" Value="public Muine.PluginLib.ISong PlayingSong { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.ISong</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:Muine.PluginLib.ISong" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Playing">
      <MemberSignature Language="C#" Value="public bool Playing { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public int Position { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public bool HasNext { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrevious">
      <MemberSignature Language="C#" Value="public bool HasPrevious { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Playlist">
      <MemberSignature Language="C#" Value="public Muine.PluginLib.ISong[] Playlist { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.ISong[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:Muine.PluginLib.ISong[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selection">
      <MemberSignature Language="C#" Value="public Muine.PluginLib.ISong[] Selection { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.ISong[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:Muine.PluginLib.ISong[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllSongs">
      <MemberSignature Language="C#" Value="public Muine.PluginLib.ISong[] AllSongs { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.ISong[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array containing all songs in Muine's database</summary>
        <value>a <see cref="T:Muine.PluginLib.ISong[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowVisible">
      <MemberSignature Language="C#" Value="public bool WindowVisible { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="UIManager">
      <MemberSignature Language="C#" Value="public Gtk.UIManager UIManager { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.UIManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns Muine's <see cref="T:Gtk.UIManager" /></summary>
        <value>a <see cref="T:Gtk.UIManager" /></value>
        <remarks>
          <example>
            <code lang="C#">
ActionEntry [] action_entries = new Gtk.ActionEntry [] {
	new ActionEntry ("Poof", Gtk.Stock.Execute, "_Poof", 
		"&lt;control&gt;&lt;shift&gt;P", null, new EventHandler (OnPoof))
};

action_group = new Gtk.ActionGroup ("PoofPluginActions");
action_group.Add (action_entries);

player.UIManager.InsertActionGroup (action_group, -1);

player.UIManager.AddUi (player.UIManager.NewMergeId (), 
	"/MenuBar/FileMenu/ExtraFileActions", "PoofMenuItem",
	"Poof", UIManagerItemType.Menuitem, false);
	    </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PackWidget">
      <MemberSignature Language="C#" Value="public void PackWidget (Gtk.Widget widget);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <summary>Packs a widget into the playlist window</summary>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <remarks>Use this to pack a widget into the end of the playlist window's main vbox</remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public Gtk.Window Window { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns Muine's playlist window</summary>
        <value>a <see cref="T:Gtk.Window" /></value>
        <remarks>Use this to properly parent your plug-in's windows.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BusyLevel">
      <MemberSignature Language="C#" Value="public uint BusyLevel { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Busy indicator</summary>
        <value>a <see cref="T:System.UInt32" /></value>
        <remarks>
          <para>Muine displays a busy cursor if BusyLevel is greater than zero.</para>
          <example>
            <code lang="C#">
player.BusyLevel ++;

DoIntensiveOperation ();

player.BusyLevel --;
	    </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SongChangedEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.SongChangedEventHandler SongChangedEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.SongChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChangedEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.StateChangedEventHandler StateChangedEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.StateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="TickEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.TickEventHandler TickEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.TickEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaylistChangedEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.GenericEventHandler PlaylistChangedEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.GenericEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChangedEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.GenericEventHandler SelectionChangedEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.GenericEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchedFoldersChangedEvent">
      <MemberSignature Language="C#" Value="public event Muine.PluginLib.GenericEventHandler WatchedFoldersChangedEvent;" />
      <MemberType>Event</MemberType>
      <ReturnValue>
        <ReturnType>Muine.PluginLib.GenericEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchedFolders">
      <MemberSignature Language="C#" Value="public string[] WatchedFolders { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
